/*
 C. Wake Me Up When Rickember Ends
 Ограничение времени    0.25 секунд
 Ограничение памяти    256Mb
 Ввод    стандартный ввод или input.txt
 Вывод    стандартный вывод или output.txt
 Сейчас Рику надо попасть из вселенной с номером S во вселенную
 с номером F. Он знает все существующие телепорты, и казалось
 бы нет никакой проблемы. Но, далеко не секрет, что за свою
 долгую жизнь Рик поссорился много с кем. Из своего личного опыта он знает,
 что при телепортациях есть вероятность, что его заставят ответить за свои слова.

 Если Рик знает вероятности быть прижатым к стенке на
 всех существующих телепортациях, помогите ему посчитать минимальную вероятность,
 что он всё-таки столкнется с неприятностями.

 Формат ввода
 В первой строке даны количество вселенных N (2 ≤ N ≤ 100),
 количество существующих телепортаций M (1 ≤ M ≤ N ⋅ (N - 1) / 2),
 стартовая вселенная S (1 ≤ S ≤ N) и конечная вселенная F (1 ≤ F ≤ N).

 Далее в M строках дается описание телепортаций в формате Si, Fi, Pi,
 где Si и Fi — номера вселенных, которые связывает i-я телепортация (телепорты двунаправленные,
 1 ≤ Si, Fi ≤ N), Pi — вероятность быть избитым на i-й телепортации в процентах (0 ≤ Pi ≤ 100).

 Формат вывода
 Вероятность быть избитым с точностью до 10-6.
 
 Пример
 Ввод    Вывод
 5 7 1 3
 1 2 20
 3 4 10
 1 5 37
 1 3 50
 2 3 20
 4 5 92
 1 4 67
 0.36
 Примечания
 В этом случае опять же считается, что не бывает телепортов из вселенной
 в неё же саму, как и двух одинаковых телепортов
 (то есть с одинаковыми начальной и конечной вселенной).
 Гаранитруется, что путь между S и F существует всегда.
 */
#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <cassert>

template<class T, class DistT>
bool Relax_stl_priority_queue(size_t parent, size_t child, T edge_weight,
                              std::vector<DistT> &distances) {
    // true if the function worked
    if (distances[child] < distances[parent] * edge_weight) {
        distances[child] = distances[parent] * edge_weight;
        return true;
    }
    return false;
}
template<class T, class DistT>
void DIJKSTRA_stl_priority_queue(size_t n, size_t root,
                  std::vector<std::vector<std::pair<size_t, T>>> const &Adj,
                  std::vector<DistT> &distances) {
    assert(n > root && Adj.size() == n);
    // Adj[i] is a list of pairs: vert to that i have edges and this edge val
    typedef std::pair<size_t, DistT> P;
    auto lesser = [](const P &a, const P &b) {
        return a.second < b.second ||
        (a.second == b.second && a.first < b.first);
    };
    std::priority_queue<P, std::vector<P>, decltype(lesser)> Q(lesser);
    std::vector<bool> S(n, false);
    DistT inf = 0;
    distances.clear();
    distances = std::vector<DistT>(n, inf);
    distances[root] = 1;
    Q.push({root, 1});
    while (!Q.empty()) {
        P min = Q.top();
        Q.pop();
        // to not checking checked vert many times
        if (S[min.first]) continue;
        // add our min vert to set of checked vert
        S[min.first] = true;
        for (auto vert : Adj[min.first])
            if (Relax_stl_priority_queue(min.first,
                                         vert.first,
                                         vert.second,
                                         distances))
                Q.push({vert.first, distances[vert.first]});
    }
}

double funk(uint32_t N, uint32_t M, uint32_t root, uint32_t f,
          std::vector<std::vector<std::pair<size_t, double>>> &Adj) {
    // fill Adj
    for (auto &dvec : Adj)
        for (auto &d : dvec)
            d.second = static_cast<double>(100 - d.second) / 100;
    std::vector<double> distances;
    DIJKSTRA_stl_priority_queue(N, root, Adj, distances);
    return 1 - distances[f];
}
int main() {
    uint32_t N, M, S, F;
    std::cin >> N >> M >> S >> F;
    std::vector<std::vector<std::pair<size_t, double>>> Adj(N);
    size_t s, f, percent;
    for (size_t i = 0; i < M; ++i) {
        std::cin >> s >> f >> percent;
        --s;
        --f;
        Adj[s].push_back({f, percent});
        Adj[f].push_back({s, percent});
    }
    std::cout << funk(N, M, --S, --F, Adj);
}
