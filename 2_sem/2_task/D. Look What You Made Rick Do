/*
 D. Look What You Made Rick Do
 Ограничение времени    1 секунда
 Ограничение памяти    256Mb
 Ввод    стандартный ввод или input.txt
 Вывод    стандартный вывод или output.txt
 Рик отправляет Морти в путешествие по N вселенным.
 У него есть список всех существующих однонаправленных телепортов.
 Чтобы Морти не потерялся, Рику необходимо узнать,
 между какими вселенными существуют пути, а между какими нет. Помогите ему в этом!

 Формат ввода
 На первой строке задано количество вселенных N (1 ≤ N ≤ 1 000).
 Следующие N строк имеют длину N, состоят из нулей и единиц и задают матрицу смежности вселенных.
 Единица в i-й строке j-м столбце обозначает телепорт из i-й вселенной в j-ю.

 Формат вывода
 Выведите матрицу, где единица в i-й строке j-м столбце обозначает
 существование пути из i-й вселенной в j-ю и ноль — его отсутствие.

 Пример
 Ввод    Вывод
 3
 010
 001
 000
 
 011
 001
 000
 */
#include <iostream>
#include <vector>
#include <string>
#include <cassert>

template<class type = uintmax_t>
void TRANSITIVE_CLOSURE(std::vector<std::vector<bool>> &data) {
    uint32_t base = sizeof(type) * 8;
    size_t n = data.size();
    size_t matrix_size = n / base + (n % base == 0 ? 0 : 1);
    std::vector<std::vector<type>> T_lines(n), T_columns(n);
    uint32_t cnt = base;
    // fill T_lines and T_columns
    // else type can overload type(1) in left shift operation data[i][j] << cnt
    type bit_lines, bit_columns;
    for (size_t i = 0; i < n; ++i, cnt = base)
        for (size_t j = 0; j < n; ++j) {
            bit_lines = data[i][j];
            bit_columns = data[j][i];
            if (cnt == base) {
                cnt = 0;
                T_lines[i].push_back(bit_lines);
                T_columns[i].push_back(bit_columns);
            } else {
                *T_lines[i].rbegin() |= (bit_lines << cnt);
                *T_columns[i].rbegin() |= (bit_columns << cnt);
            }
            ++cnt;
        }
    for (size_t k = 0; k < n; ++k)
        for (size_t i = 0; i < n; ++i) {
            if (T_columns[k][i / base] >> i % base & 1)
                for (size_t j = 0; j < matrix_size; ++j) {
                    T_lines[i][j] |= T_lines[k][j];
                }
            if (T_lines[k][i / base] >> i % base & 1)
                for (size_t j = 0; j < matrix_size; ++j) {
                    T_columns[i][j] |= T_columns[k][j];
                }
        }
    // fill data to TRANSITIVE CLOSURE
    for (size_t i = 0; i < n; ++i)
        for (size_t j = 0; j < n; ++j)
            data[i][j] = T_lines[i][j / base] >> j % base & 1;
}

void funk(std::vector<std::vector<bool>> &data, std::vector<std::string> &ans) {
    size_t n = data.size();
    TRANSITIVE_CLOSURE(data);
    for (size_t i = 0; i < n; ++i)
        for (size_t j = 0; j < n; ++j)
            ans[i] += static_cast<int8_t>('0' + data[i][j]);
}
int main() {
    uint32_t N;
    std::cin >> N;
    std::vector<std::vector<bool>> data(N);
    std::string s;
    for (size_t i = 0; i < N; ++i) {
        std::cin >> s;
        for (auto c : s)
            c == '0' ? data[i].push_back(false) : data[i].push_back(true);
    }
    std::vector<std::string> ans(N);
    funk(data, ans);
    for (auto s : ans)
        std::cout << s << std::endl;
}
