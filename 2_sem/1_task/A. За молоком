/*
A. За молоком
Ограничение времени	2 секунды
Ограничение памяти	256Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Леон и Матильда собрались пойти в магазин за молоком. 
Их хочет поймать Стэнсфилд, поэтому нашим товарищам нужно сделать
это как можно быстрее. Каково минимальное количество улиц, по которым пройдёт
хотя бы один из ребят (либо Матильда, либо Леон, либо оба вместе)?

Формат ввода
Первая строка содержит количество вершин n (1 ≤ n ≤ 105),
количество ребер m (0 ≤ m ≤ 105) и номера вершин графа leon,
matilda, milk, в которых находятся соответственно Леон, Матильда и магазин с молоком.

Следующие m строк содержат ребра графа. В каждой строке два числа,
разделенные пробелом, если между i и j существует ребро.
Гарантируется, что в графе нет петель и мультиребер.

Формат вывода
Одно число – количество ребер.

Пример 1
Ввод	Вывод
3 2 1 2 3
1 3
2 3
2
Пример 2
Ввод	Вывод
3 2 1 2 3
1 3
1 2
*/
#include<vector>
#include<iostream>
#include<cassert>
#include<set>
#include<queue>
#include <utility>
#include <algorithm>
using namespace std;

class Graph {
using VP = vector<pair<int, int>>;
using VI = vector<int>;
using VUI = vector<unsigned int>;
private:
    vector<set<int>> adj;
    VI colors;  // 0 - white, 1 - grey, 2 - black
public:
    Graph() = default;
    explicit Graph(int n) { adj.resize(n); }  // numbering of vert beg with 0
    void add(int ver1, int ver2) {
        if (max(ver1, ver2) + 1 > adj.size())
            adj.resize(max(ver1, ver2) + 1);
        adj[ver1].insert(ver2);
        adj[ver2].insert(ver1);
    }
    void add_spec_num(int ver1, int ver2) {  // fix if numbering
        --ver1;                              // of vert beg with 1
        --ver2;
        if (max(ver1, ver2) + 1 > adj.size())
            adj.resize(max(ver1, ver2) + 1);
        adj[ver1].insert(ver2);
        adj[ver2].insert(ver1);
    }
    void BFS(int s, VUI &deep) {
        assert(s < adj.size());
        deep.clear();
        deep.resize(adj.size(), -1);
        colors.clear();
        colors.resize(adj.size(), 0);
        queue<int> que;
        que.push(s);
        deep[s] = 0;
        colors[s] = 1;
        while (!que.empty()) {
            int u = que.front();
            que.pop();
            for (auto v : adj[u])
                if (colors[v] == 0) {
                    deep[v] = deep[u] + 1;
                    colors[v] = 1;
                    que.push(v);
                }
            colors[u] = 2;
        }
    }
};
unsigned funk(Graph &gr, int leon, int matilda, int milk) {
    vector<unsigned int> dist_for_leon;
    vector<unsigned int> dist_for_mat;
    vector<unsigned int> dist_for_milk;
    gr.BFS(leon, dist_for_leon);
    gr.BFS(matilda, dist_for_mat);
    gr.BFS(milk, dist_for_milk);
    unsigned int ans_length = -1U;
    for (unsigned int ui = 0; ui < dist_for_leon.size(); ++ui) {
        unsigned int sum;
        if (dist_for_leon[ui] != -1U || dist_for_mat[ui] != -1U
                                            ||dist_for_milk[ui] != -1U) {
            sum = dist_for_leon[ui] + dist_for_mat[ui] + dist_for_milk[ui];
            if (sum < ans_length)
                ans_length = sum;
        }
    }
    return ans_length;
}
int main() {
    int n, m, leon, matilda, milk;
    cin >> n >> m >> leon >> matilda >> milk;
    int adj1, adj2;
    Graph gr(n);
    for (int i = 0; i < m; ++i) {
        cin >> adj1 >> adj2;
        gr.add_spec_num(adj1, adj2);
    }
    unsigned ans = funk(gr, leon - 1, matilda - 1, milk - 1);
    cout << ans;
}
