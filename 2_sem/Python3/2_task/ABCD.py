'''A. FizzBuzz
Ограничение времени	1 секунда
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Cейчас многие компании на программистских собеседованиях проводят
предварительное тестирование. Классическая задача для такого тестирования — задача FizzBuzz.

Вам дано натуральное число N. Требуется вывести последовательность чисел 
от 1 до N. Но если число кратно 3, то выводится "Fizz"; если кратно 5, то "Buzz"; а если кратно 15, то "Fizz Buzz".

Поверьте, даже с такой простой задачей многие претенденты не справляются.

Формат ввода
Одно число — N.

Формат вывода
Искомая последовательность через запятую и пробел.

Пример
Ввод	Вывод
15
1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, Fizz Buzz
'''
Fizz_cnt = 1
Buzz_cnt = 1
N = int(input())
for i in range(1, N):
    if Fizz_cnt == 3 and Buzz_cnt == 5:
        elem = "Fizz Buzz"
        Fizz_cnt = 0
        Buzz_cnt = 0
    elif Fizz_cnt == 3:
        elem = "Fizz"
        Fizz_cnt = 0
    elif Buzz_cnt == 5:
        elem = "Buzz"
        Buzz_cnt = 0
    else:
        elem = i
    print(elem, end=", ")
    Fizz_cnt = Fizz_cnt + 1
    Buzz_cnt = Buzz_cnt + 1

if Fizz_cnt == 3 and Buzz_cnt == 5:
    elem = "Fizz Buzz"
elif Fizz_cnt == 3:
    elem = "Fizz"
elif Buzz_cnt == 5:
    elem = "Buzz"
else:
    elem = N
print(elem, end="")

#-------------------------------------------------------------------

'''B. Ближайший счастливый билетик
Ограничение времени	1 секунда
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Как известно, счастливым билетиком называется такой, у которого сумма первых 
и последних трёх цифр равны. Напишите программу, которая для данного
номера билетика найдёт ближайший к нему счастливый.
Формат ввода
Число из шести цифр.
Формат вывода
Ближайшее к данному число из шести цифр такое, что сумма первых трех равна сумме последних.
Пример 1
Ввод	Вывод
223840
223700
Пример 2
Ввод	Вывод
228419
228417
'''
def is_num_right(N):
    return ((N % 1000) // 100 +
            (N % 100) // 10 + N % 10) == (N // 100000 + (N % 100000) // 10000 +
                                          (N % 10000) // 1000)


N = int(input())
up_edge = 999999
down_edge = 100001
if N < down_edge:
    print(down_edge)
elif N > up_edge:
    print(up_edge)
else:
    n = N
    while n > down_edge:
        if is_num_right(n):
            down_edge = n
            break
        n = n - 1
    n = N
    while n < up_edge:
        if is_num_right(n):
            up_edge = n
            break
        n = n + 1
    print(down_edge if (N - down_edge) <
                       (up_edge - N) else up_edge)

#-------------------------------------------------------------------

'''C. Двумерный список
Ограничение времени	1 секунда
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
В этой задаче требуется вывести массив размера N × M, в котором на месте (i,j) стоит произведение i × j.

Эту задачу можно (но необязательно) решить в одну строку.

Формат ввода
Два числа: N и M.

Формат вывода
Массив размера N × M, в котором числа разделены пробелами.

Обратите внимание, для подсчёта произведений используется 1-индексация.

Пример 1
Ввод	Вывод
1 3
1 2 3
'''
N, M = input().split()
N = int(N)
M = int(M)
i, j = 1, 1
for i in range(N):
    i = i + 1
    for j in range(M):
        j = j + 1
        print(i * j, end=" ")
    print()


#-------------------------------------------------------------------

'''D. i-e простое число
Ограничение времени	2 секунды
Ограничение памяти	10Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Вам необходимо написать программу для вывода i-го простого числа.

Формат ввода
Одно число i - порядковый номер простого числа.

Формат вывода
i-е простое число.

Пример 1
Ввод	Вывод
1
2
Пример 2
Ввод	Вывод
2
3
Пример 3
Ввод	Вывод
5
11
'''
def is_prime(n):
    if n < 2:
        return False
    cnt = 2
    while cnt * cnt <= n:
        if n % cnt == 0:
            return False
        cnt = cnt + 1
    return True


i = int(input())
j, prime_cnt = 2, 0
while True:
    prime_cnt = prime_cnt + is_prime(j)
    if prime_cnt == i:
        print(j)
        break
    j = j + 1

#-------------------------------------------------------------------

'''E. Системы счисления
Ограничение времени	1 секунда
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Переведите число из десятеричной системы счисления в некоторую другую

Формат ввода
На вход подается одна строка, в которой записано число в десятеричной системе счисления и основание новой (не превышающее 9)

Формат вывода
Введите число в новой системе счисления

Пример 1
Ввод	Вывод
10 9
11
Пример 2
Ввод	Вывод
16 2
10000
'''
def system_of_calc_conv(num, new_base):
    if num < new_base:
        return num
    return system_of_calc_conv(num // new_base, new_base) * 10 + num % new_base


number, base = input().split()
number = int(number)
base = int(base)
print(system_of_calc_conv(number, base))
