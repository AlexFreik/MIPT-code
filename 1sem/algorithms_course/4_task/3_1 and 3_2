/*3_1. Высокая пирамида. Каждый вышележащий слой
пирамиды должен быть не больше нижележащего.
N ≤ 200.*/
#include<iostream>
#include<vector>
#include<cassert>

long long int funk(int n) {
    std::vector<long long int> tempvec(n + 1, 0);
    std::vector<std::vector<long long int>> vec(n + 1, tempvec);
    vec[0][0] = 1;
    for (int i = 1; i <= n; ++i)
        for (int j = 0; j <= n; ++j)
            vec[i][j] = vec[i - 1][j] + ((j < i) ? 0 : vec[i][j - i]);
    return vec[n][n];
}
int main() {
    int n;
    std::cin >> n;
    std::cout << funk(n);
}

/*3_2. Широкая пирамида. Каждый вышележащий слой пирамиды
должен быть строго меньше нижележащего.
N ≤ 300.*/
#include<iostream>
#include<vector>
#include<cassert>

long long int funk(int n) {
    std::vector<long long int> tempvec(n + 1, 0);
    std::vector<std::vector<long long int>> vec(n + 1, tempvec);
    vec[0][0] = 1;
    for (int i = 1; i <= n; ++i)
        for (int j = 0; j <= n; ++j)
            vec[i][j] = vec[i - 1][j] + ((j < i) ? 0 : vec[i - 1][j - i]);
    return vec[n][n];
}
int main() {
    int n;
    std::cin >> n;
    std::cout << funk(n);
}
