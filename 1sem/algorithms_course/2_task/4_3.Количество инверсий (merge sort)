/*Дана последовательность целых чисел из диапазона (-1000000000 .. 1000000000).
Длина последовательности не больше 1000000. Числа записаны по одному в строке.
Количество чисел не указано. Пусть количество элементов n, и числа записаны в массиве
a = a[i]: i из [0..n-1]. Требуется напечатать количество таких пар индексов (i,j)
из [0..n-1], что (i < j и a[i] > a[j]). Указание: количество инверсий может
быть больше 4*1000000000 - используйте int64_t.*/
#include<iostream>
#include<vector>

bool is_grater_num(const int & a, const int &b) {
    if (a > b)
        return true;
    return false;
}
template<class Type, class Iterator>
void merge(Iterator beg1, Iterator end1, Iterator beg2, Iterator end2,
           bool (*greater)(const Type &, const Type &), int64_t &inversion) {
    std::vector<Type> merge_vec;
    auto left1(beg1), left2(beg2);
    while (left1 != end1 && left2 != end2) {
        if (greater(*left1, *left2)) {
            inversion += end1 - left1;
            merge_vec.push_back(*left2);
            ++left2;
        } else {
            merge_vec.push_back(*left1);
            ++left1;
        }
    }
    for (; left1 != end1; ++left1)
        merge_vec.push_back(*left1);
    for (; left2 != end2; ++left2)
        merge_vec.push_back(*left2);
    auto merge_it = merge_vec.begin();
    for (left1 = beg1; left1 != end1; ++left1, ++merge_it)
        *left1 = *merge_it;
    for (left2 = beg2; left2 != end2; ++left2, ++merge_it)
        *left2 = *merge_it;
}
template<class Type, class Iterator>
int64_t merge_sort(Iterator beg, Iterator end,
                   bool (*greater)(const Type &, const Type &)) {
    static int64_t inversion = 0;
    if (end - beg < 2)
        return inversion;
    auto median = (end - beg - 1) / 2 + beg;
    merge_sort(beg, median + 1, greater);
    merge_sort(median + 1, end, greater);
    merge<Type>(beg, median + 1, median + 1, end, greater, inversion);
    return inversion;
}
int main() {
    std::vector<int> ivec;
    for (int temp; std::cin >> temp; ivec.push_back(temp));     // input
    int64_t ans = merge_sort<int>(ivec.begin(), ivec.end(), is_grater_num);
    std::cout << ans;                                            // output
}
